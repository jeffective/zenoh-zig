const std = @import("std");

pub const c = @import("zenoh_c");

pub fn Moved(T: type) type {
    const converter = switch (T) {
        c.z_owned_alloc_layout_t => c.z_alloc_layout_move,
        c.z_owned_bytes_t => c.z_bytes_move,
        c.z_owned_bytes_writer_t => c.z_bytes_writer_move,
        c.z_owned_chunk_alloc_result_t => c.z_chunk_alloc_result_move,
        c.z_owned_closure_hello_t => c.z_closure_hello_move,
        c.z_owned_closure_matching_status_t => c.z_closure_matching_status_move,
        c.z_owned_closure_query_t => c.z_closure_query_move,
        c.z_owned_closure_reply_t => c.z_closure_reply_move,
        c.z_owned_closure_sample_t => c.z_closure_sample_move,
        c.z_owned_closure_zid_t => c.z_closure_zid_move,
        c.z_owned_condvar_t => c.z_condvar_move,
        c.z_owned_config_t => c.z_config_move,
        c.z_owned_encoding_t => c.z_encoding_move,
        c.z_owned_fifo_handler_query_t => c.z_fifo_handler_query_move,
        c.z_owned_fifo_handler_reply_t => c.z_fifo_handler_reply_move,
        c.z_owned_fifo_handler_sample_t => c.z_fifo_handler_sample_move,
        c.z_owned_hello_t => c.z_hello_move,
        c.z_owned_keyexpr_t => c.z_keyexpr_move,
        c.z_owned_liveliness_token_t => c.z_liveliness_token_move,
        c.z_owned_matching_listener_t => c.z_matching_listener_move,
        c.z_owned_memory_layout_t => c.z_memory_layout_move,
        c.z_owned_mutex_t => c.z_mutex_move,
        c.z_owned_publisher_t => c.z_publisher_move,
        c.z_owned_querier_t => c.z_querier_move,
        c.z_owned_query_t => c.z_query_move,
        c.z_owned_queryable_t => c.z_queryable_move,
        c.z_owned_reply_t => c.z_reply_move,
        c.z_owned_reply_err_t => c.z_reply_err_move,
        c.z_owned_ring_handler_query_t => c.z_ring_handler_query_move,
        c.z_owned_ring_handler_reply_t => c.z_ring_handler_reply_move,
        c.z_owned_ring_handler_sample_t => c.z_ring_handler_sample_move,
        c.z_owned_sample_t => c.z_sample_move,
        c.z_owned_session_t => c.z_session_move,
        c.z_owned_shm_client_t => c.z_shm_client_move,
        c.z_owned_shm_client_storage_t => c.z_shm_client_storage_move,
        c.z_owned_shm_t => c.z_shm_move,
        c.z_owned_shm_mut_t => c.z_shm_mut_move,
        c.z_owned_shm_provider_t => c.z_shm_provider_move,
        c.z_owned_slice_t => c.z_slice_move,
        c.z_owned_source_info_t => c.z_source_info_move,
        c.z_owned_string_array_t => c.z_string_array_move,
        c.z_owned_string_t => c.z_string_move,
        c.z_owned_subscriber_t => c.z_subscriber_move,
        c.z_owned_task_t => c.z_task_move,
        c.zc_owned_closure_log_t => c.zc_closure_log_move,
        c.zc_owned_concurrent_close_handle_t => c.zc_concurrent_close_handle_move,
        c.zc_owned_shm_client_list_t => c.zc_shm_client_list_move,
        c.ze_owned_advanced_publisher_t => c.ze_advanced_publisher_move,
        c.ze_owned_advanced_subscriber_t => c.ze_advanced_subscriber_move,
        c.ze_owned_closure_miss_t => c.ze_closure_miss_move,
        c.ze_owned_publication_cache_t => c.ze_publication_cache_move,
        c.ze_owned_querying_subscriber_t => c.ze_querying_subscriber_move,
        c.ze_owned_sample_miss_listener_t => c.ze_sample_miss_listener_move,
        c.ze_owned_serializer_t => c.ze_serializer_move,
        else => comptime unreachable,
    };
    return @typeInfo(@TypeOf(converter)).@"fn".return_type.?;
}

pub fn move(value: anytype) Moved(std.meta.Child(@TypeOf(value))) {
    const converter = switch (std.meta.Child(@TypeOf(value))) {
        c.z_owned_alloc_layout_t => c.z_alloc_layout_move,
        c.z_owned_bytes_t => c.z_bytes_move,
        c.z_owned_bytes_writer_t => c.z_bytes_writer_move,
        c.z_owned_chunk_alloc_result_t => c.z_chunk_alloc_result_move,
        c.z_owned_closure_hello_t => c.z_closure_hello_move,
        c.z_owned_closure_matching_status_t => c.z_closure_matching_status_move,
        c.z_owned_closure_query_t => c.z_closure_query_move,
        c.z_owned_closure_reply_t => c.z_closure_reply_move,
        c.z_owned_closure_sample_t => c.z_closure_sample_move,
        c.z_owned_closure_zid_t => c.z_closure_zid_move,
        c.z_owned_condvar_t => c.z_condvar_move,
        c.z_owned_config_t => c.z_config_move,
        c.z_owned_encoding_t => c.z_encoding_move,
        c.z_owned_fifo_handler_query_t => c.z_fifo_handler_query_move,
        c.z_owned_fifo_handler_reply_t => c.z_fifo_handler_reply_move,
        c.z_owned_fifo_handler_sample_t => c.z_fifo_handler_sample_move,
        c.z_owned_hello_t => c.z_hello_move,
        c.z_owned_keyexpr_t => c.z_keyexpr_move,
        c.z_owned_liveliness_token_t => c.z_liveliness_token_move,
        c.z_owned_matching_listener_t => c.z_matching_listener_move,
        c.z_owned_memory_layout_t => c.z_memory_layout_move,
        c.z_owned_mutex_t => c.z_mutex_move,
        c.z_owned_publisher_t => c.z_publisher_move,
        c.z_owned_querier_t => c.z_querier_move,
        c.z_owned_query_t => c.z_query_move,
        c.z_owned_queryable_t => c.z_queryable_move,
        c.z_owned_reply_t => c.z_reply_move,
        c.z_owned_reply_err_t => c.z_reply_err_move,
        c.z_owned_ring_handler_query_t => c.z_ring_handler_query_move,
        c.z_owned_ring_handler_reply_t => c.z_ring_handler_reply_move,
        c.z_owned_ring_handler_sample_t => c.z_ring_handler_sample_move,
        c.z_owned_sample_t => c.z_sample_move,
        c.z_owned_session_t => c.z_session_move,
        c.z_owned_shm_client_t => c.z_shm_client_move,
        c.z_owned_shm_client_storage_t => c.z_shm_client_storage_move,
        c.z_owned_shm_t => c.z_shm_move,
        c.z_owned_shm_mut_t => c.z_shm_mut_move,
        c.z_owned_shm_provider_t => c.z_shm_provider_move,
        c.z_owned_slice_t => c.z_slice_move,
        c.z_owned_source_info_t => c.z_source_info_move,
        c.z_owned_string_array_t => c.z_string_array_move,
        c.z_owned_string_t => c.z_string_move,
        c.z_owned_subscriber_t => c.z_subscriber_move,
        c.z_owned_task_t => c.z_task_move,
        c.zc_owned_closure_log_t => c.zc_closure_log_move,
        c.zc_owned_concurrent_close_handle_t => c.zc_concurrent_close_handle_move,
        c.zc_owned_shm_client_list_t => c.zc_shm_client_list_move,
        c.ze_owned_advanced_publisher_t => c.ze_advanced_publisher_move,
        c.ze_owned_advanced_subscriber_t => c.ze_advanced_subscriber_move,
        c.ze_owned_closure_miss_t => c.ze_closure_miss_move,
        c.ze_owned_publication_cache_t => c.ze_publication_cache_move,
        c.ze_owned_querying_subscriber_t => c.ze_querying_subscriber_move,
        c.ze_owned_sample_miss_listener_t => c.ze_sample_miss_listener_move,
        c.ze_owned_serializer_t => c.ze_serializer_move,
        else => comptime unreachable,
    };
    return converter(value);
}

pub fn drop(value: anytype) void {
    const dropper = switch (std.meta.Child(@TypeOf(value))) {
        c.z_moved_alloc_layout_t => c.z_alloc_layout_drop,
        c.z_moved_bytes_t => c.z_bytes_drop,
        c.z_moved_bytes_writer_t => c.z_bytes_writer_drop,
        c.z_moved_chunk_alloc_result_t => c.z_chunk_alloc_result_drop,
        c.z_moved_closure_hello_t => c.z_closure_hello_drop,
        c.z_moved_closure_matching_status_t => c.z_closure_matching_status_drop,
        c.z_moved_closure_query_t => c.z_closure_query_drop,
        c.z_moved_closure_reply_t => c.z_closure_reply_drop,
        c.z_moved_closure_sample_t => c.z_closure_sample_drop,
        c.z_moved_closure_zid_t => c.z_closure_zid_drop,
        c.z_moved_condvar_t => c.z_condvar_drop,
        c.z_moved_config_t => c.z_config_drop,
        c.z_moved_encoding_t => c.z_encoding_drop,
        c.z_moved_fifo_handler_query_t => c.z_fifo_handler_query_drop,
        c.z_moved_fifo_handler_reply_t => c.z_fifo_handler_reply_drop,
        c.z_moved_fifo_handler_sample_t => c.z_fifo_handler_sample_drop,
        c.z_moved_hello_t => c.z_hello_drop,
        c.z_moved_keyexpr_t => c.z_keyexpr_drop,
        c.z_moved_liveliness_token_t => c.z_liveliness_token_drop,
        c.z_moved_matching_listener_t => c.z_matching_listener_drop,
        c.z_moved_memory_layout_t => c.z_memory_layout_drop,
        c.z_moved_mutex_t => c.z_mutex_drop,
        c.z_moved_publisher_t => c.z_publisher_drop,
        c.z_moved_querier_t => c.z_querier_drop,
        c.z_moved_query_t => c.z_query_drop,
        c.z_moved_queryable_t => c.z_queryable_drop,
        c.z_moved_reply_t => c.z_reply_drop,
        c.z_moved_reply_err_t => c.z_reply_err_drop,
        c.z_moved_ring_handler_query_t => c.z_ring_handler_query_drop,
        c.z_moved_ring_handler_reply_t => c.z_ring_handler_reply_drop,
        c.z_moved_ring_handler_sample_t => c.z_ring_handler_sample_drop,
        c.z_moved_sample_t => c.z_sample_drop,
        c.z_moved_session_t => c.z_session_drop,
        c.z_moved_shm_client_t => c.z_shm_client_drop,
        c.z_moved_shm_client_storage_t => c.z_shm_client_storage_drop,
        c.z_moved_shm_t => c.z_shm_drop,
        c.z_moved_shm_mut_t => c.z_shm_mut_drop,
        c.z_moved_shm_provider_t => c.z_shm_provider_drop,
        c.z_moved_slice_t => c.z_slice_drop,
        c.z_moved_source_info_t => c.z_source_info_drop,
        c.z_moved_string_array_t => c.z_string_array_drop,
        c.z_moved_string_t => c.z_string_drop,
        c.z_moved_subscriber_t => c.z_subscriber_drop,
        c.z_moved_task_t => c.z_task_drop,
        c.zc_moved_closure_log_t => c.zc_closure_log_drop,
        c.zc_moved_concurrent_close_handle_t => c.zc_concurrent_close_handle_drop,
        c.zc_moved_shm_client_list_t => c.zc_shm_client_list_drop,
        c.ze_moved_advanced_publisher_t => c.ze_advanced_publisher_drop,
        c.ze_moved_advanced_subscriber_t => c.ze_advanced_subscriber_drop,
        c.ze_moved_closure_miss_t => c.ze_closure_miss_drop,
        c.ze_moved_publication_cache_t => c.ze_publication_cache_drop,
        c.ze_moved_querying_subscriber_t => c.ze_querying_subscriber_drop,
        c.ze_moved_sample_miss_listener_t => c.ze_sample_miss_listener_drop,
        c.ze_moved_serializer_t => c.ze_serializer_drop,
        else => @compileError("cannot drop " ++ @typeName(@TypeOf(value))),
    };
    dropper(value);
}

pub fn Loaned(T: type) type {
    const loaner = switch (T) {
        c.z_owned_alloc_layout_t => c.z_alloc_layout_loan,
        c.z_owned_bytes_t => c.z_bytes_loan,
        c.z_owned_bytes_writer_t => c.z_bytes_writer_loan,
        c.z_owned_closure_hello_t => c.z_closure_hello_loan,
        c.z_owned_closure_matching_status_t => c.z_closure_matching_status_loan,
        c.z_owned_closure_query_t => c.z_closure_query_loan,
        c.z_owned_closure_reply_t => c.z_closure_reply_loan,
        c.z_owned_closure_sample_t => c.z_closure_sample_loan,
        c.z_owned_closure_zid_t => c.z_closure_zid_loan,
        c.z_owned_condvar_t => c.z_condvar_loan,
        c.z_owned_config_t => c.z_config_loan,
        c.z_owned_encoding_t => c.z_encoding_loan,
        c.z_owned_fifo_handler_query_t => c.z_fifo_handler_query_loan,
        c.z_owned_fifo_handler_reply_t => c.z_fifo_handler_reply_loan,
        c.z_owned_fifo_handler_sample_t => c.z_fifo_handler_sample_loan,
        c.z_owned_hello_t => c.z_hello_loan,
        c.z_owned_keyexpr_t => c.z_keyexpr_loan,
        c.z_owned_liveliness_token_t => c.z_liveliness_token_loan,
        c.z_owned_memory_layout_t => c.z_memory_layout_loan,
        c.z_owned_publisher_t => c.z_publisher_loan,
        c.z_owned_querier_t => c.z_querier_loan,
        c.z_owned_query_t => c.z_query_loan,
        c.z_owned_queryable_t => c.z_queryable_loan,
        c.z_owned_reply_err_t => c.z_reply_err_loan,
        c.z_owned_reply_t => c.z_reply_loan,
        c.z_owned_ring_handler_query_t => c.z_ring_handler_query_loan,
        c.z_owned_ring_handler_reply_t => c.z_ring_handler_reply_loan,
        c.z_owned_ring_handler_sample_t => c.z_ring_handler_sample_loan,
        c.z_owned_sample_t => c.z_sample_loan,
        c.z_owned_session_t => c.z_session_loan,
        c.z_owned_shm_client_storage_t => c.z_shm_client_storage_loan,
        c.z_owned_shm_t => c.z_shm_loan,
        c.z_owned_shm_mut_t => c.z_shm_mut_loan,
        c.z_owned_shm_provider_t => c.z_shm_provider_loan,
        c.z_owned_slice_t => c.z_slice_loan,
        c.z_owned_source_info_t => c.z_source_info_loan,
        c.z_owned_string_array_t => c.z_string_array_loan,
        c.z_owned_string_t => c.z_string_loan,
        c.z_owned_subscriber_t => c.z_subscriber_loan,
        c.z_view_keyexpr_t => c.z_view_keyexpr_loan,
        c.z_view_slice_t => c.z_view_slice_loan,
        c.z_view_string_t => c.z_view_string_loan,
        c.zc_owned_closure_log_t => c.zc_closure_log_loan,
        c.zc_owned_shm_client_list_t => c.zc_shm_client_list_loan,
        c.ze_owned_advanced_publisher_t => c.ze_advanced_publisher_loan,
        c.ze_owned_advanced_subscriber_t => c.ze_advanced_subscriber_loan,
        c.ze_owned_closure_miss_t => c.ze_closure_miss_loan,
        c.ze_owned_publication_cache_t => c.ze_publication_cache_loan,
        c.ze_owned_querying_subscriber_t => c.ze_querying_subscriber_loan,
        c.ze_owned_serializer_t => c.ze_serializer_loan,
        else => comptime unreachable,
    };
    return @typeInfo(@TypeOf(loaner)).@"fn".return_type.?;
}

pub fn loan(value: anytype) Loaned(std.meta.Child(@TypeOf(value))) {
    const loaner = switch (std.meta.Child(@TypeOf(value))) {
        c.z_owned_alloc_layout_t => c.z_alloc_layout_loan,
        c.z_owned_bytes_t => c.z_bytes_loan,
        c.z_owned_bytes_writer_t => c.z_bytes_writer_loan,
        c.z_owned_closure_hello_t => c.z_closure_hello_loan,
        c.z_owned_closure_matching_status_t => c.z_closure_matching_status_loan,
        c.z_owned_closure_query_t => c.z_closure_query_loan,
        c.z_owned_closure_reply_t => c.z_closure_reply_loan,
        c.z_owned_closure_sample_t => c.z_closure_sample_loan,
        c.z_owned_closure_zid_t => c.z_closure_zid_loan,
        c.z_owned_condvar_t => c.z_condvar_loan,
        c.z_owned_config_t => c.z_config_loan,
        c.z_owned_encoding_t => c.z_encoding_loan,
        c.z_owned_fifo_handler_query_t => c.z_fifo_handler_query_loan,
        c.z_owned_fifo_handler_reply_t => c.z_fifo_handler_reply_loan,
        c.z_owned_fifo_handler_sample_t => c.z_fifo_handler_sample_loan,
        c.z_owned_hello_t => c.z_hello_loan,
        c.z_owned_keyexpr_t => c.z_keyexpr_loan,
        c.z_owned_liveliness_token_t => c.z_liveliness_token_loan,
        c.z_owned_memory_layout_t => c.z_memory_layout_loan,
        c.z_owned_publisher_t => c.z_publisher_loan,
        c.z_owned_querier_t => c.z_querier_loan,
        c.z_owned_query_t => c.z_query_loan,
        c.z_owned_queryable_t => c.z_queryable_loan,
        c.z_owned_reply_err_t => c.z_reply_err_loan,
        c.z_owned_reply_t => c.z_reply_loan,
        c.z_owned_ring_handler_query_t => c.z_ring_handler_query_loan,
        c.z_owned_ring_handler_reply_t => c.z_ring_handler_reply_loan,
        c.z_owned_ring_handler_sample_t => c.z_ring_handler_sample_loan,
        c.z_owned_sample_t => c.z_sample_loan,
        c.z_owned_session_t => c.z_session_loan,
        c.z_owned_shm_client_storage_t => c.z_shm_client_storage_loan,
        c.z_owned_shm_t => c.z_shm_loan,
        c.z_owned_shm_mut_t => c.z_shm_mut_loan,
        c.z_owned_shm_provider_t => c.z_shm_provider_loan,
        c.z_owned_slice_t => c.z_slice_loan,
        c.z_owned_source_info_t => c.z_source_info_loan,
        c.z_owned_string_array_t => c.z_string_array_loan,
        c.z_owned_string_t => c.z_string_loan,
        c.z_owned_subscriber_t => c.z_subscriber_loan,
        c.z_view_keyexpr_t => c.z_view_keyexpr_loan,
        c.z_view_slice_t => c.z_view_slice_loan,
        c.z_view_string_t => c.z_view_string_loan,
        c.zc_owned_closure_log_t => c.zc_closure_log_loan,
        c.zc_owned_shm_client_list_t => c.zc_shm_client_list_loan,
        c.ze_owned_advanced_publisher_t => c.ze_advanced_publisher_loan,
        c.ze_owned_advanced_subscriber_t => c.ze_advanced_subscriber_loan,
        c.ze_owned_closure_miss_t => c.ze_closure_miss_loan,
        c.ze_owned_publication_cache_t => c.ze_publication_cache_loan,
        c.ze_owned_querying_subscriber_t => c.ze_querying_subscriber_loan,
        c.ze_owned_serializer_t => c.ze_serializer_loan,
        else => comptime unreachable,
    };
    return loaner(value);
}

pub fn LoanedMut(T: type) type {
    const loaner = switch (T) {
        c.z_owned_bytes_t => c.z_bytes_loan_mut,
        c.z_owned_bytes_writer_t => c.z_bytes_writer_loan_mut,
        c.z_owned_closure_hello_t => c.z_closure_hello_loan_mut,
        c.z_owned_closure_query_t => c.z_closure_query_loan_mut,
        c.z_owned_closure_reply_t => c.z_closure_reply_loan_mut,
        c.z_owned_closure_sample_t => c.z_closure_sample_loan_mut,
        c.z_owned_condvar_t => c.z_condvar_loan_mut,
        c.z_owned_config_t => c.z_config_loan_mut,
        c.z_owned_encoding_t => c.z_encoding_loan_mut,
        c.z_owned_mutex_t => c.z_mutex_loan_mut,
        c.z_owned_publisher_t => c.z_publisher_loan_mut,
        c.z_owned_querier_t => c.z_querier_loan_mut,
        c.z_owned_query_t => c.z_query_loan_mut,
        c.z_owned_reply_err_t => c.z_reply_err_loan_mut,
        c.z_owned_reply_t => c.z_reply_loan_mut,
        c.z_owned_sample_t => c.z_sample_loan_mut,
        c.z_owned_session_t => c.z_session_loan_mut,
        c.z_owned_shm_t => c.z_shm_loan_mut,
        c.z_owned_shm_mut_t => c.z_shm_mut_loan_mut,
        c.z_owned_string_array_t => c.z_string_array_loan_mut,
        c.zc_owned_shm_client_list_t => c.zc_shm_client_list_loan_mut,
        c.ze_owned_advanced_publisher_t => c.ze_advanced_publisher_loan_mut,
        c.ze_owned_serializer_t => c.ze_serializer_loan_mut,
        else => comptime unreachable,
    };
    return @typeInfo(@TypeOf(loaner)).@"fn".return_type.?;
}

pub fn loanMut(value: anytype) LoanedMut(std.meta.Child(@TypeOf(value))) {
    const loaner = switch (std.meta.Child(@TypeOf(value))) {
        c.z_owned_bytes_t => c.z_bytes_loan_mut,
        c.z_owned_bytes_writer_t => c.z_bytes_writer_loan_mut,
        c.z_owned_closure_hello_t => c.z_closure_hello_loan_mut,
        c.z_owned_closure_query_t => c.z_closure_query_loan_mut,
        c.z_owned_closure_reply_t => c.z_closure_reply_loan_mut,
        c.z_owned_closure_sample_t => c.z_closure_sample_loan_mut,
        c.z_owned_condvar_t => c.z_condvar_loan_mut,
        c.z_owned_config_t => c.z_config_loan_mut,
        c.z_owned_encoding_t => c.z_encoding_loan_mut,
        c.z_owned_mutex_t => c.z_mutex_loan_mut,
        c.z_owned_publisher_t => c.z_publisher_loan_mut,
        c.z_owned_querier_t => c.z_querier_loan_mut,
        c.z_owned_query_t => c.z_query_loan_mut,
        c.z_owned_reply_err_t => c.z_reply_err_loan_mut,
        c.z_owned_reply_t => c.z_reply_loan_mut,
        c.z_owned_sample_t => c.z_sample_loan_mut,
        c.z_owned_session_t => c.z_session_loan_mut,
        c.z_owned_shm_t => c.z_shm_loan_mut,
        c.z_owned_shm_mut_t => c.z_shm_mut_loan_mut,
        c.z_owned_string_array_t => c.z_string_array_loan_mut,
        c.zc_owned_shm_client_list_t => c.zc_shm_client_list_loan_mut,
        c.ze_owned_advanced_publisher_t => c.ze_advanced_publisher_loan_mut,
        c.ze_owned_serializer_t => c.ze_serializer_loan_mut,
        else => comptime unreachable,
    };
    return loaner(value);
}
