pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub extern fn __assert_fail([*c]const u8, [*c]const u8, c_int, [*c]const u8) void;

pub const INT64_C = @import("std").zig.c_translation.Macros.L_SUFFIX;

pub const INTMAX_C = @import("std").zig.c_translation.Macros.L_SUFFIX;

pub const UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;

pub const UINT64_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;

pub const UINTMAX_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;

pub const intmax_t = c_long;
pub const uintmax_t = c_ulong;
pub const int_fast8_t = i8;
pub const int_fast64_t = i64;
pub const int_least8_t = i8;
pub const int_least16_t = i16;
pub const int_least32_t = i32;
pub const int_least64_t = i64;
pub const uint_fast8_t = u8;
pub const uint_fast64_t = u64;
pub const uint_least8_t = u8;
pub const uint_least16_t = u16;
pub const uint_least32_t = u32;
pub const uint_least64_t = u64;
pub const int_fast16_t = i32;
pub const int_fast32_t = i32;
pub const uint_fast16_t = u32;
pub const uint_fast32_t = u32;

pub extern fn atoi([*c]const u8) c_int;
pub extern fn atol([*c]const u8) c_long;
pub extern fn atoll([*c]const u8) c_longlong;
pub extern fn atof([*c]const u8) f64;
pub extern fn strtof([*c]const u8, [*c][*c]u8) f32;
pub extern fn strtod([*c]const u8, [*c][*c]u8) f64;
pub extern fn strtold([*c]const u8, [*c][*c]u8) c_longdouble;
pub extern fn strtol([*c]const u8, [*c][*c]u8, c_int) c_long;
pub extern fn strtoul([*c]const u8, [*c][*c]u8, c_int) c_ulong;
pub extern fn strtoll([*c]const u8, [*c][*c]u8, c_int) c_longlong;
pub extern fn strtoull([*c]const u8, [*c][*c]u8, c_int) c_ulonglong;
pub extern fn rand() c_int;
pub extern fn srand(c_uint) void;

pub extern fn aligned_alloc(c_ulong, c_ulong) ?*anyopaque;
pub extern fn abort() noreturn;
pub extern fn atexit(?*const fn () callconv(.c) void) c_int;
pub extern fn exit(c_int) noreturn;
pub extern fn _Exit(c_int) noreturn;
pub extern fn at_quick_exit(?*const fn () callconv(.c) void) c_int;
pub extern fn quick_exit(c_int) void;
pub extern fn getenv([*c]const u8) [*c]u8;
pub extern fn system([*c]const u8) c_int;
pub extern fn bsearch(?*const anyopaque, ?*const anyopaque, usize, usize, ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) c_int) ?*anyopaque;
pub extern fn qsort(?*anyopaque, usize, usize, ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) c_int) void;
pub extern fn abs(c_int) c_int;
pub extern fn labs(c_long) c_long;
pub extern fn llabs(c_longlong) c_longlong;

pub const div_t = extern struct {
    quot: c_int = @import("std").mem.zeroes(c_int),
    rem: c_int = @import("std").mem.zeroes(c_int),
};
pub const ldiv_t = extern struct {
    quot: c_long = @import("std").mem.zeroes(c_long),
    rem: c_long = @import("std").mem.zeroes(c_long),
};
pub const lldiv_t = extern struct {
    quot: c_longlong = @import("std").mem.zeroes(c_longlong),
    rem: c_longlong = @import("std").mem.zeroes(c_longlong),
};
pub extern fn div(c_int, c_int) div_t;
pub extern fn ldiv(c_long, c_long) ldiv_t;
pub extern fn lldiv(c_longlong, c_longlong) lldiv_t;
pub extern fn mblen([*c]const u8, usize) c_int;
pub extern fn mbtowc(noalias [*c]wchar_t, noalias [*c]const u8, usize) c_int;
pub extern fn wctomb([*c]u8, wchar_t) c_int;
pub extern fn mbstowcs(noalias [*c]wchar_t, noalias [*c]const u8, usize) usize;
pub extern fn wcstombs(noalias [*c]u8, noalias [*c]const wchar_t, usize) usize;
pub extern fn __ctype_get_mb_cur_max() usize;
pub extern fn posix_memalign([*c]?*anyopaque, usize, usize) c_int;
pub extern fn setenv([*c]const u8, [*c]const u8, c_int) c_int;
pub extern fn unsetenv([*c]const u8) c_int;
pub extern fn mkstemp([*c]u8) c_int;
pub extern fn mkostemp([*c]u8, c_int) c_int;
pub extern fn mkdtemp([*c]u8) [*c]u8;
pub extern fn getsubopt([*c][*c]u8, [*c]const [*c]u8, [*c][*c]u8) c_int;
pub extern fn rand_r([*c]c_uint) c_int;
pub extern fn realpath(noalias [*c]const u8, noalias [*c]u8) [*c]u8;
pub extern fn random() c_long;
pub extern fn srandom(c_uint) void;
pub extern fn initstate(c_uint, [*c]u8, usize) [*c]u8;
pub extern fn setstate([*c]u8) [*c]u8;
pub extern fn putenv([*c]u8) c_int;
pub extern fn posix_openpt(c_int) c_int;
pub extern fn grantpt(c_int) c_int;
pub extern fn unlockpt(c_int) c_int;
pub extern fn ptsname(c_int) [*c]u8;
pub extern fn l64a(c_long) [*c]u8;
pub extern fn a64l([*c]const u8) c_long;
pub extern fn setkey([*c]const u8) void;
pub extern fn drand48() f64;
pub extern fn erand48([*c]c_ushort) f64;
pub extern fn lrand48() c_long;
pub extern fn nrand48([*c]c_ushort) c_long;
pub extern fn mrand48() c_long;
pub extern fn jrand48([*c]c_ushort) c_long;
pub extern fn srand48(c_long) void;
pub extern fn seed48([*c]c_ushort) [*c]c_ushort;
pub extern fn lcong48([*c]c_ushort) void;
pub extern fn alloca(c_ulong) ?*anyopaque;
pub extern fn mktemp([*c]u8) [*c]u8;
pub extern fn mkstemps([*c]u8, c_int) c_int;
pub extern fn mkostemps([*c]u8, c_int, c_int) c_int;
pub extern fn valloc(usize) ?*anyopaque;
pub extern fn memalign(c_ulong, c_ulong) ?*anyopaque;
pub extern fn getloadavg([*c]f64, c_int) c_int;
pub extern fn clearenv() c_int;
pub extern fn reallocarray(?*anyopaque, usize, usize) ?*anyopaque;
pub extern fn qsort_r(?*anyopaque, usize, usize, ?*const fn (?*const anyopaque, ?*const anyopaque, ?*anyopaque) callconv(.c) c_int, ?*anyopaque) void;

pub extern fn calloc(c_ulong, c_ulong) ?*anyopaque;

pub const MB_CUR_MAX = __ctype_get_mb_cur_max();

pub const z_loan_mut = @compileError("unable to translate C expr: unexpected token '_Generic'");

pub const z_drop = @compileError("unable to translate C expr: unexpected token '_Generic'");

pub const z_move = @compileError("unable to translate C expr: unexpected token '_Generic'");

pub const z_internal_null = @compileError("unable to translate C expr: unexpected token '_Generic'");

pub const z_take = @compileError("unable to translate C expr: unexpected token '_Generic'");

pub const z_internal_check = @compileError("unable to translate C expr: unexpected token '_Generic'");

pub const z_call = @compileError("unable to translate C expr: unexpected token '_Generic'");

pub const z_closure = @compileError("unable to translate C expr: unexpected token '_Generic'");

pub const z_try_recv = @compileError("unable to translate C expr: unexpected token '_Generic'");

pub const z_recv = @compileError("unable to translate C expr: unexpected token '_Generic'");

pub const z_clone = @compileError("unable to translate C expr: unexpected token '_Generic'");

pub const z_loan = @compileError("unable to translate C expr: unexpected token '_Generic'");

pub inline fn INT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn INT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn INT32_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn UINT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn UINT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}

pub const __k8 = @as(c_int, 1);
pub const __k8__ = @as(c_int, 1);
pub const __tune_k8__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const unix = @as(c_int, 1);
pub const __unix = @as(c_int, 1);
pub const __unix__ = @as(c_int, 1);
pub const linux = @as(c_int, 1);
pub const __linux = @as(c_int, 1);
pub const __linux__ = @as(c_int, 1);
pub const __gnu_linux__ = @as(c_int, 1);
pub const __FLOAT128__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __STDC_EMBED_NOT_FOUND__ = @as(c_int, 0);
pub const __STDC_EMBED_FOUND__ = @as(c_int, 1);
pub const __STDC_EMBED_EMPTY__ = @as(c_int, 2);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);

pub const __UINT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __INT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_long;
pub const __INT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_TYPE__ = c_ulong;
pub const __UINT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_long;
pub const __INT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_TYPE__ = c_ulong;
pub const __UINT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __NO_MATH_ERRNO__ = @as(c_int, 1);
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __GCC_DESTRUCTIVE_SIZE = @as(c_int, 64);
pub const __GCC_CONSTRUCTIVE_SIZE = @as(c_int, 64);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __ELF__ = @as(c_int, 1);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);

pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");

pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_uint;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_NORM_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_NORM_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_NORM_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_NORM_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_long;
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");

pub const RAND_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hex);
pub const WNOHANG = @as(c_int, 1);
pub const WUNTRACED = @as(c_int, 2);
pub inline fn WEXITSTATUS(s: anytype) @TypeOf((s & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hex)) >> @as(c_int, 8)) {
    _ = &s;
    return (s & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hex)) >> @as(c_int, 8);
}
pub inline fn WTERMSIG(s: anytype) @TypeOf(s & @as(c_int, 0x7f)) {
    _ = &s;
    return s & @as(c_int, 0x7f);
}
pub inline fn WSTOPSIG(s: anytype) @TypeOf(WEXITSTATUS(s)) {
    _ = &s;
    return WEXITSTATUS(s);
}
pub inline fn WIFEXITED(s: anytype) @TypeOf(!(WTERMSIG(s) != 0)) {
    _ = &s;
    return !(WTERMSIG(s) != 0);
}
pub inline fn WIFSTOPPED(s: anytype) @TypeOf(@import("std").zig.c_translation.cast(c_short, ((s & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hex)) * @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10001, .hex)) >> @as(c_int, 8)) > @as(c_int, 0x7f00)) {
    _ = &s;
    return @import("std").zig.c_translation.cast(c_short, ((s & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hex)) * @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10001, .hex)) >> @as(c_int, 8)) > @as(c_int, 0x7f00);
}
pub inline fn WIFSIGNALED(s: anytype) @TypeOf(((s & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hex)) - @as(c_uint, 1)) < @as(c_uint, 0xff)) {
    _ = &s;
    return ((s & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hex)) - @as(c_uint, 1)) < @as(c_uint, 0xff);
}
pub const _ALLOCA_H = "";
pub inline fn WCOREDUMP(s: anytype) @TypeOf(s & @as(c_int, 0x80)) {
    _ = &s;
    return s & @as(c_int, 0x80);
}
pub inline fn WIFCONTINUED(s: anytype) @TypeOf(s == @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hex)) {
    _ = &s;
    return s == @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hex);
}

pub const _STDLIB_H = "";
pub const __NEED_size_t = "";
pub const __NEED_wchar_t = "";
pub const __DEFINED_wchar_t = "";
pub const __DEFINED_size_t = "";
pub const EXIT_FAILURE = @as(c_int, 1);
pub const EXIT_SUCCESS = @as(c_int, 0);

pub const __STDBOOL_H = "";
pub const __bool_true_false_are_defined = @as(c_int, 1);
pub const @"bool" = bool;
pub const @"true" = @as(c_int, 1);
pub const @"false" = @as(c_int, 0);
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_max_align_t = "";
pub const __need_offsetof = "";
pub const __STDDEF_H = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const offsetof = @compileError("unable to translate C expr: unexpected token 'an identifier'");

pub const __need___va_list = "";
pub const __need_va_list = "";
pub const __need_va_arg = "";
pub const __need___va_copy = "";
pub const __need_va_copy = "";
pub const __STDARG_H = "";
pub const __GNUC_VA_LIST = "";

pub const _VA_LIST = "";

pub const va_start = @compileError("unable to translate macro: undefined identifier `__builtin_va_start`");

pub const va_end = @compileError("unable to translate macro: undefined identifier `__builtin_va_end`");

pub const va_arg = @compileError("unable to translate C expr: unexpected token 'an identifier'");

pub const __va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`");

pub const va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`");

pub const __CLANG_STDINT_H = "";
pub const _STDINT_H = "";
pub const __NEED_int8_t = "";
pub const __NEED_int16_t = "";
pub const __NEED_int32_t = "";
pub const __NEED_int64_t = "";
pub const __NEED_uint8_t = "";
pub const __NEED_uint16_t = "";
pub const __NEED_uint32_t = "";
pub const __NEED_uint64_t = "";
pub const __NEED_intptr_t = "";
pub const __NEED_uintptr_t = "";
pub const __NEED_intmax_t = "";
pub const __NEED_uintmax_t = "";
pub const _Addr = c_long;
pub const _Int64 = c_long;
pub const _Reg = c_long;
pub const __BYTE_ORDER = @as(c_int, 1234);
pub const __LONG_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 0x7fffffffffffffff, .hex);
pub const __LITTLE_ENDIAN = @as(c_int, 1234);
pub const __BIG_ENDIAN = @as(c_int, 4321);
pub const __USE_TIME_BITS64 = @as(c_int, 1);
pub const __DEFINED_uintptr_t = "";
pub const __DEFINED_intptr_t = "";
pub const __DEFINED_int8_t = "";
pub const __DEFINED_int16_t = "";
pub const __DEFINED_int32_t = "";
pub const __DEFINED_int64_t = "";
pub const __DEFINED_intmax_t = "";
pub const __DEFINED_uint8_t = "";
pub const __DEFINED_uint16_t = "";
pub const __DEFINED_uint32_t = "";
pub const __DEFINED_uint64_t = "";
pub const __DEFINED_uintmax_t = "";

pub const INT16_MIN = -@as(c_int, 1) - @as(c_int, 0x7fff);

pub const INT32_MIN = -@as(c_int, 1) - @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hex);

pub const INT64_MIN = -@as(c_int, 1) - @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffffffffffff, .hex);

pub const INT8_MAX = @as(c_int, 0x7f);

pub const INT16_MAX = @as(c_int, 0x7fff);

pub const INT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hex);

pub const INT64_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffffffffffff, .hex);

pub const UINT8_MAX = @as(c_int, 0xff);

pub const UINT16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hex);

pub const UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xffffffff, .hex);

pub const UINT64_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xffffffffffffffff, .hex);

pub const INT_FAST8_MIN = INT8_MIN;

pub const INT_FAST64_MIN = INT64_MIN;

pub const INT_LEAST8_MIN = INT8_MIN;

pub const INT_LEAST16_MIN = INT16_MIN;

pub const INT_LEAST32_MIN = INT32_MIN;

pub const INT_LEAST64_MIN = INT64_MIN;

pub const INT_FAST8_MAX = INT8_MAX;

pub const INT_FAST64_MAX = INT64_MAX;

pub const INT_LEAST8_MAX = INT8_MAX;

pub const INT_LEAST16_MAX = INT16_MAX;

pub const INT_LEAST32_MAX = INT32_MAX;

pub const INT_LEAST64_MAX = INT64_MAX;

pub const UINT_FAST8_MAX = UINT8_MAX;

pub const UINT_FAST64_MAX = UINT64_MAX;

pub const UINT_LEAST8_MAX = UINT8_MAX;

pub const UINT_LEAST16_MAX = UINT16_MAX;

pub const UINT_LEAST32_MAX = UINT32_MAX;

pub const UINT_LEAST64_MAX = UINT64_MAX;

pub const INTMAX_MIN = INT64_MIN;

pub const INTMAX_MAX = INT64_MAX;

pub const UINTMAX_MAX = UINT64_MAX;

pub const WINT_MIN = @as(c_uint, 0);

pub const WINT_MAX = UINT32_MAX;

pub const WCHAR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hex) + '\x00';

pub const WCHAR_MIN = (-@as(c_int, 1) - @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hex)) + '\x00';

pub const SIG_ATOMIC_MIN = INT32_MIN;

pub const SIG_ATOMIC_MAX = INT32_MAX;

pub const INT_FAST16_MIN = INT32_MIN;

pub const INT_FAST32_MIN = INT32_MIN;

pub const INT_FAST16_MAX = INT32_MAX;

pub const INT_FAST32_MAX = INT32_MAX;

pub const UINT_FAST16_MAX = UINT32_MAX;

pub const UINT_FAST32_MAX = UINT32_MAX;

pub const INTPTR_MIN = INT64_MIN;

pub const INTPTR_MAX = INT64_MAX;

pub const UINTPTR_MAX = UINT64_MAX;

pub const PTRDIFF_MIN = INT64_MIN;

pub const PTRDIFF_MAX = INT64_MAX;

pub const SIZE_MAX = UINT64_MAX;

pub const __llvm__ = @as(c_int, 1);

pub const __clang__ = @as(c_int, 1);

pub const __clang_major__ = @as(c_int, 19);

pub const __clang_minor__ = @as(c_int, 1);

pub const __clang_patchlevel__ = @as(c_int, 7);

pub const __clang_version__ = "19.1.7 (https://github.com/ziglang/zig-bootstrap 1c3c59435891bc9caf8cd1d3783773369d191c5f)";

pub const __GNUC__ = @as(c_int, 4);

pub const __GNUC_MINOR__ = @as(c_int, 2);

pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);

pub const __GXX_ABI_VERSION = @as(c_int, 1002);

pub const __ATOMIC_RELAXED = @as(c_int, 0);

pub const __ATOMIC_CONSUME = @as(c_int, 1);

pub const __ATOMIC_ACQUIRE = @as(c_int, 2);

pub const __ATOMIC_RELEASE = @as(c_int, 3);

pub const __ATOMIC_ACQ_REL = @as(c_int, 4);

pub const __ATOMIC_SEQ_CST = @as(c_int, 5);

pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);

pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);

pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);

pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);

pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);

pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);

pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);

pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);

pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);

pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);

pub const __FPCLASS_SNAN = @as(c_int, 0x0001);

pub const __FPCLASS_QNAN = @as(c_int, 0x0002);

pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);

pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);

pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);

pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);

pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);

pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);

pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);

pub const __FPCLASS_POSINF = @as(c_int, 0x0200);

pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);

pub const __VERSION__ = "Clang 19.1.7 (https://github.com/ziglang/zig-bootstrap 1c3c59435891bc9caf8cd1d3783773369d191c5f)";

pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);

pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);

pub const __clang_literal_encoding__ = "UTF-8";

pub const __clang_wide_literal_encoding__ = "UTF-32";

pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);

pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);

pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);

pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;

pub const __LITTLE_ENDIAN__ = @as(c_int, 1);

pub const _LP64 = @as(c_int, 1);

pub const __LP64__ = @as(c_int, 1);

pub const __CHAR_BIT__ = @as(c_int, 8);

pub const __BOOL_WIDTH__ = @as(c_int, 8);

pub const __SHRT_WIDTH__ = @as(c_int, 16);

pub const __INT_WIDTH__ = @as(c_int, 32);

pub const __LONG_WIDTH__ = @as(c_int, 64);

pub const __LLONG_WIDTH__ = @as(c_int, 64);

pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);

pub const __SCHAR_MAX__ = @as(c_int, 127);

pub const __SHRT_MAX__ = @as(c_int, 32767);

pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);

pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);

pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);

pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);

pub const __WCHAR_WIDTH__ = @as(c_int, 32);

pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);

pub const __WINT_WIDTH__ = @as(c_int, 32);

pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);

pub const __INTMAX_WIDTH__ = @as(c_int, 64);

pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);

pub const __SIZE_WIDTH__ = @as(c_int, 64);

pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);

pub const __UINTMAX_WIDTH__ = @as(c_int, 64);

pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);

pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);

pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);

pub const __INTPTR_WIDTH__ = @as(c_int, 64);

pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);

pub const __UINTPTR_WIDTH__ = @as(c_int, 64);

pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);

pub const __SIZEOF_FLOAT__ = @as(c_int, 4);

pub const __SIZEOF_INT__ = @as(c_int, 4);

pub const __SIZEOF_LONG__ = @as(c_int, 8);

pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);

pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);

pub const __SIZEOF_POINTER__ = @as(c_int, 8);

pub const __SIZEOF_SHORT__ = @as(c_int, 2);

pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);

pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);

pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);

pub const __SIZEOF_WINT_T__ = @as(c_int, 4);

pub const __SIZEOF_INT128__ = @as(c_int, 16);

pub const __INTMAX_TYPE__ = c_long;

pub const __INTMAX_FMTd__ = "ld";

pub const __INTMAX_FMTi__ = "li";

pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");

pub const __UINTMAX_TYPE__ = c_ulong;

pub const __UINTMAX_FMTo__ = "lo";

pub const __UINTMAX_FMTu__ = "lu";

pub const __UINTMAX_FMTx__ = "lx";

pub const __UINTMAX_FMTX__ = "lX";

pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");

pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);

pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);

pub const __UINT64_TYPE__ = c_ulong;

pub const __UINT64_FMTo__ = "lo";

pub const __UINT64_FMTu__ = "lu";

pub const __UINT64_FMTx__ = "lx";

pub const __UINT64_FMTX__ = "lX";

pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");

pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`");

pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`");

pub const _FEATURES_H = "";

pub const _BSD_SOURCE = @as(c_int, 1);

pub const _XOPEN_SOURCE = @as(c_int, 700);

pub const __restrict = @compileError("unable to translate C expr: unexpected token 'restrict'");

pub const __inline = @compileError("unable to translate C expr: unexpected token 'inline'");

pub const __REDIR = @compileError("unable to translate C expr: unexpected token '__typeof__'");

pub const assert = @compileError("unable to translate macro: undefined identifier `__FILE__`");

pub const static_assert = @compileError("unable to translate C expr: unexpected token '_Static_assert'");

pub const struct___va_list_tag_1 = extern struct {
    gp_offset: c_uint = @import("std").mem.zeroes(c_uint),
    fp_offset: c_uint = @import("std").mem.zeroes(c_uint),
    overflow_arg_area: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    reg_save_area: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};

pub const __builtin_va_list = [1]struct___va_list_tag_1;

pub const __gnuc_va_list = __builtin_va_list;

pub const va_list = __builtin_va_list;

pub const ptrdiff_t = c_long;

pub const wchar_t = c_int;

pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong align(8) = @import("std").mem.zeroes(c_longlong),
    __clang_max_align_nonce2: c_longdouble align(16) = @import("std").mem.zeroes(c_longdouble),
};

pub extern fn malloc(c_ulong) ?*anyopaque;

pub extern fn realloc(?*anyopaque, c_ulong) ?*anyopaque;

pub extern fn free(?*anyopaque) void;

pub fn z_malloc(arg_size: usize) callconv(.c) ?*anyopaque {
    var size = arg_size;
    _ = &size;
    return malloc(size);
}

pub fn z_realloc(arg_ptr: ?*anyopaque, arg_size: usize) callconv(.c) ?*anyopaque {
    var ptr = arg_ptr;
    _ = &ptr;
    var size = arg_size;
    _ = &size;
    return realloc(ptr, size);
}

pub fn z_free(arg_ptr: ?*anyopaque) callconv(.c) void {
    var ptr = arg_ptr;
    _ = &ptr;
    free(ptr);
}

pub const ALIGN = @compileError("unable to translate macro: undefined identifier `aligned`");

pub fn z_alloc_layout_move(arg_x: [*c]z_owned_alloc_layout_t) callconv(.c) [*c]z_moved_alloc_layout_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_alloc_layout_t, @ptrCast(@alignCast(x)));
}
pub fn z_bytes_move(arg_x: [*c]z_owned_bytes_t) callconv(.c) [*c]z_moved_bytes_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_bytes_t, @ptrCast(@alignCast(x)));
}
pub fn z_bytes_writer_move(arg_x: [*c]z_owned_bytes_writer_t) callconv(.c) [*c]z_moved_bytes_writer_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_bytes_writer_t, @ptrCast(@alignCast(x)));
}
pub fn z_chunk_alloc_result_move(arg_x: [*c]z_owned_chunk_alloc_result_t) callconv(.c) [*c]z_moved_chunk_alloc_result_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_chunk_alloc_result_t, @ptrCast(@alignCast(x)));
}
pub fn z_closure_hello_move(arg_x: [*c]z_owned_closure_hello_t) callconv(.c) [*c]z_moved_closure_hello_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_closure_hello_t, @ptrCast(@alignCast(x)));
}
pub fn z_closure_matching_status_move(arg_x: [*c]z_owned_closure_matching_status_t) callconv(.c) [*c]z_moved_closure_matching_status_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_closure_matching_status_t, @ptrCast(@alignCast(x)));
}
pub fn z_closure_query_move(arg_x: [*c]z_owned_closure_query_t) callconv(.c) [*c]z_moved_closure_query_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_closure_query_t, @ptrCast(@alignCast(x)));
}
pub fn z_closure_reply_move(arg_x: [*c]z_owned_closure_reply_t) callconv(.c) [*c]z_moved_closure_reply_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_closure_reply_t, @ptrCast(@alignCast(x)));
}
pub fn z_closure_sample_move(arg_x: [*c]z_owned_closure_sample_t) callconv(.c) [*c]z_moved_closure_sample_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_closure_sample_t, @ptrCast(@alignCast(x)));
}
pub fn z_closure_zid_move(arg_x: [*c]z_owned_closure_zid_t) callconv(.c) [*c]z_moved_closure_zid_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_closure_zid_t, @ptrCast(@alignCast(x)));
}
pub fn z_condvar_move(arg_x: [*c]z_owned_condvar_t) callconv(.c) [*c]z_moved_condvar_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_condvar_t, @ptrCast(@alignCast(x)));
}
pub fn z_config_move(arg_x: [*c]z_owned_config_t) callconv(.c) [*c]z_moved_config_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_config_t, @ptrCast(@alignCast(x)));
}
pub fn z_encoding_move(arg_x: [*c]z_owned_encoding_t) callconv(.c) [*c]z_moved_encoding_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_encoding_t, @ptrCast(@alignCast(x)));
}
pub fn z_fifo_handler_query_move(arg_x: [*c]z_owned_fifo_handler_query_t) callconv(.c) [*c]z_moved_fifo_handler_query_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_fifo_handler_query_t, @ptrCast(@alignCast(x)));
}
pub fn z_fifo_handler_reply_move(arg_x: [*c]z_owned_fifo_handler_reply_t) callconv(.c) [*c]z_moved_fifo_handler_reply_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_fifo_handler_reply_t, @ptrCast(@alignCast(x)));
}
pub fn z_fifo_handler_sample_move(arg_x: [*c]z_owned_fifo_handler_sample_t) callconv(.c) [*c]z_moved_fifo_handler_sample_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_fifo_handler_sample_t, @ptrCast(@alignCast(x)));
}
pub fn z_hello_move(arg_x: [*c]z_owned_hello_t) callconv(.c) [*c]z_moved_hello_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_hello_t, @ptrCast(@alignCast(x)));
}
pub fn z_keyexpr_move(arg_x: [*c]z_owned_keyexpr_t) callconv(.c) [*c]z_moved_keyexpr_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_keyexpr_t, @ptrCast(@alignCast(x)));
}
pub fn z_liveliness_token_move(arg_x: [*c]z_owned_liveliness_token_t) callconv(.c) [*c]z_moved_liveliness_token_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_liveliness_token_t, @ptrCast(@alignCast(x)));
}
pub fn z_matching_listener_move(arg_x: [*c]z_owned_matching_listener_t) callconv(.c) [*c]z_moved_matching_listener_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_matching_listener_t, @ptrCast(@alignCast(x)));
}
pub fn z_memory_layout_move(arg_x: [*c]z_owned_memory_layout_t) callconv(.c) [*c]z_moved_memory_layout_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_memory_layout_t, @ptrCast(@alignCast(x)));
}
pub fn z_mutex_move(arg_x: [*c]z_owned_mutex_t) callconv(.c) [*c]z_moved_mutex_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_mutex_t, @ptrCast(@alignCast(x)));
}
pub fn z_publisher_move(arg_x: [*c]z_owned_publisher_t) callconv(.c) [*c]z_moved_publisher_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_publisher_t, @ptrCast(@alignCast(x)));
}
pub fn z_querier_move(arg_x: [*c]z_owned_querier_t) callconv(.c) [*c]z_moved_querier_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_querier_t, @ptrCast(@alignCast(x)));
}
pub fn z_query_move(arg_x: [*c]z_owned_query_t) callconv(.c) [*c]z_moved_query_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_query_t, @ptrCast(@alignCast(x)));
}
pub fn z_queryable_move(arg_x: [*c]z_owned_queryable_t) callconv(.c) [*c]z_moved_queryable_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_queryable_t, @ptrCast(@alignCast(x)));
}
pub fn z_reply_move(arg_x: [*c]z_owned_reply_t) callconv(.c) [*c]z_moved_reply_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_reply_t, @ptrCast(@alignCast(x)));
}
pub fn z_reply_err_move(arg_x: [*c]z_owned_reply_err_t) callconv(.c) [*c]z_moved_reply_err_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_reply_err_t, @ptrCast(@alignCast(x)));
}
pub fn z_ring_handler_query_move(arg_x: [*c]z_owned_ring_handler_query_t) callconv(.c) [*c]z_moved_ring_handler_query_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_ring_handler_query_t, @ptrCast(@alignCast(x)));
}
pub fn z_ring_handler_reply_move(arg_x: [*c]z_owned_ring_handler_reply_t) callconv(.c) [*c]z_moved_ring_handler_reply_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_ring_handler_reply_t, @ptrCast(@alignCast(x)));
}
pub fn z_ring_handler_sample_move(arg_x: [*c]z_owned_ring_handler_sample_t) callconv(.c) [*c]z_moved_ring_handler_sample_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_ring_handler_sample_t, @ptrCast(@alignCast(x)));
}
pub fn z_sample_move(arg_x: [*c]z_owned_sample_t) callconv(.c) [*c]z_moved_sample_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_sample_t, @ptrCast(@alignCast(x)));
}
pub fn z_session_move(arg_x: [*c]z_owned_session_t) callconv(.c) [*c]z_moved_session_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_session_t, @ptrCast(@alignCast(x)));
}
pub fn z_shm_client_move(arg_x: [*c]z_owned_shm_client_t) callconv(.c) [*c]z_moved_shm_client_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_shm_client_t, @ptrCast(@alignCast(x)));
}
pub fn z_shm_client_storage_move(arg_x: [*c]z_owned_shm_client_storage_t) callconv(.c) [*c]z_moved_shm_client_storage_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_shm_client_storage_t, @ptrCast(@alignCast(x)));
}
pub fn z_shm_move(arg_x: [*c]z_owned_shm_t) callconv(.c) [*c]z_moved_shm_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_shm_t, @ptrCast(@alignCast(x)));
}
pub fn z_shm_mut_move(arg_x: [*c]z_owned_shm_mut_t) callconv(.c) [*c]z_moved_shm_mut_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_shm_mut_t, @ptrCast(@alignCast(x)));
}
pub fn z_shm_provider_move(arg_x: [*c]z_owned_shm_provider_t) callconv(.c) [*c]z_moved_shm_provider_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_shm_provider_t, @ptrCast(@alignCast(x)));
}
pub fn z_slice_move(arg_x: [*c]z_owned_slice_t) callconv(.c) [*c]z_moved_slice_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_slice_t, @ptrCast(@alignCast(x)));
}
pub fn z_source_info_move(arg_x: [*c]z_owned_source_info_t) callconv(.c) [*c]z_moved_source_info_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_source_info_t, @ptrCast(@alignCast(x)));
}
pub fn z_string_array_move(arg_x: [*c]z_owned_string_array_t) callconv(.c) [*c]z_moved_string_array_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_string_array_t, @ptrCast(@alignCast(x)));
}
pub fn z_string_move(arg_x: [*c]z_owned_string_t) callconv(.c) [*c]z_moved_string_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_string_t, @ptrCast(@alignCast(x)));
}
pub fn z_subscriber_move(arg_x: [*c]z_owned_subscriber_t) callconv(.c) [*c]z_moved_subscriber_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_subscriber_t, @ptrCast(@alignCast(x)));
}
pub fn z_task_move(arg_x: [*c]z_owned_task_t) callconv(.c) [*c]z_moved_task_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]z_moved_task_t, @ptrCast(@alignCast(x)));
}
pub fn zc_closure_log_move(arg_x: [*c]zc_owned_closure_log_t) callconv(.c) [*c]zc_moved_closure_log_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]zc_moved_closure_log_t, @ptrCast(@alignCast(x)));
}
pub fn zc_concurrent_close_handle_move(arg_x: [*c]zc_owned_concurrent_close_handle_t) callconv(.c) [*c]zc_moved_concurrent_close_handle_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]zc_moved_concurrent_close_handle_t, @ptrCast(@alignCast(x)));
}
pub fn zc_shm_client_list_move(arg_x: [*c]zc_owned_shm_client_list_t) callconv(.c) [*c]zc_moved_shm_client_list_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]zc_moved_shm_client_list_t, @ptrCast(@alignCast(x)));
}
pub fn ze_advanced_publisher_move(arg_x: [*c]ze_owned_advanced_publisher_t) callconv(.c) [*c]ze_moved_advanced_publisher_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]ze_moved_advanced_publisher_t, @ptrCast(@alignCast(x)));
}
pub fn ze_advanced_subscriber_move(arg_x: [*c]ze_owned_advanced_subscriber_t) callconv(.c) [*c]ze_moved_advanced_subscriber_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]ze_moved_advanced_subscriber_t, @ptrCast(@alignCast(x)));
}
pub fn ze_closure_miss_move(arg_x: [*c]ze_owned_closure_miss_t) callconv(.c) [*c]ze_moved_closure_miss_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]ze_moved_closure_miss_t, @ptrCast(@alignCast(x)));
}
pub fn ze_publication_cache_move(arg_x: [*c]ze_owned_publication_cache_t) callconv(.c) [*c]ze_moved_publication_cache_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]ze_moved_publication_cache_t, @ptrCast(@alignCast(x)));
}
pub fn ze_querying_subscriber_move(arg_x: [*c]ze_owned_querying_subscriber_t) callconv(.c) [*c]ze_moved_querying_subscriber_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]ze_moved_querying_subscriber_t, @ptrCast(@alignCast(x)));
}
pub fn ze_sample_miss_listener_move(arg_x: [*c]ze_owned_sample_miss_listener_t) callconv(.c) [*c]ze_moved_sample_miss_listener_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]ze_moved_sample_miss_listener_t, @ptrCast(@alignCast(x)));
}
pub fn ze_serializer_move(arg_x: [*c]ze_owned_serializer_t) callconv(.c) [*c]ze_moved_serializer_t {
    var x = arg_x;
    _ = &x;
    return @as([*c]ze_moved_serializer_t, @ptrCast(@alignCast(x)));
}
pub fn z_alloc_layout_take(arg_this_: [*c]z_owned_alloc_layout_t, arg_x: [*c]z_moved_alloc_layout_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_alloc_layout_null(&x.*._this);
}
pub fn z_bytes_take(arg_this_: [*c]z_owned_bytes_t, arg_x: [*c]z_moved_bytes_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_bytes_null(&x.*._this);
}
pub fn z_bytes_writer_take(arg_this_: [*c]z_owned_bytes_writer_t, arg_x: [*c]z_moved_bytes_writer_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_bytes_writer_null(&x.*._this);
}
pub fn z_chunk_alloc_result_take(arg_this_: [*c]z_owned_chunk_alloc_result_t, arg_x: [*c]z_moved_chunk_alloc_result_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_chunk_alloc_result_null(&x.*._this);
}
pub fn z_closure_hello_take(arg_this_: [*c]z_owned_closure_hello_t, arg_x: [*c]z_moved_closure_hello_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_closure_hello_null(&x.*._this);
}
pub fn z_closure_matching_status_take(arg_closure_: [*c]z_owned_closure_matching_status_t, arg_x: [*c]z_moved_closure_matching_status_t) callconv(.c) void {
    var closure_ = arg_closure_;
    _ = &closure_;
    var x = arg_x;
    _ = &x;
    closure_.* = x.*._this;
    z_internal_closure_matching_status_null(&x.*._this);
}
pub fn z_closure_query_take(arg_closure_: [*c]z_owned_closure_query_t, arg_x: [*c]z_moved_closure_query_t) callconv(.c) void {
    var closure_ = arg_closure_;
    _ = &closure_;
    var x = arg_x;
    _ = &x;
    closure_.* = x.*._this;
    z_internal_closure_query_null(&x.*._this);
}
pub fn z_closure_reply_take(arg_closure_: [*c]z_owned_closure_reply_t, arg_x: [*c]z_moved_closure_reply_t) callconv(.c) void {
    var closure_ = arg_closure_;
    _ = &closure_;
    var x = arg_x;
    _ = &x;
    closure_.* = x.*._this;
    z_internal_closure_reply_null(&x.*._this);
}
pub fn z_closure_sample_take(arg_closure_: [*c]z_owned_closure_sample_t, arg_x: [*c]z_moved_closure_sample_t) callconv(.c) void {
    var closure_ = arg_closure_;
    _ = &closure_;
    var x = arg_x;
    _ = &x;
    closure_.* = x.*._this;
    z_internal_closure_sample_null(&x.*._this);
}
pub fn z_closure_zid_take(arg_closure_: [*c]z_owned_closure_zid_t, arg_x: [*c]z_moved_closure_zid_t) callconv(.c) void {
    var closure_ = arg_closure_;
    _ = &closure_;
    var x = arg_x;
    _ = &x;
    closure_.* = x.*._this;
    z_internal_closure_zid_null(&x.*._this);
}
pub fn z_condvar_take(arg_this_: [*c]z_owned_condvar_t, arg_x: [*c]z_moved_condvar_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_condvar_null(&x.*._this);
}
pub fn z_config_take(arg_this_: [*c]z_owned_config_t, arg_x: [*c]z_moved_config_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_config_null(&x.*._this);
}
pub fn z_encoding_take(arg_this_: [*c]z_owned_encoding_t, arg_x: [*c]z_moved_encoding_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_encoding_null(&x.*._this);
}
pub fn z_fifo_handler_query_take(arg_this_: [*c]z_owned_fifo_handler_query_t, arg_x: [*c]z_moved_fifo_handler_query_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_fifo_handler_query_null(&x.*._this);
}
pub fn z_fifo_handler_reply_take(arg_this_: [*c]z_owned_fifo_handler_reply_t, arg_x: [*c]z_moved_fifo_handler_reply_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_fifo_handler_reply_null(&x.*._this);
}
pub fn z_fifo_handler_sample_take(arg_this_: [*c]z_owned_fifo_handler_sample_t, arg_x: [*c]z_moved_fifo_handler_sample_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_fifo_handler_sample_null(&x.*._this);
}
pub fn z_hello_take(arg_this_: [*c]z_owned_hello_t, arg_x: [*c]z_moved_hello_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_hello_null(&x.*._this);
}
pub fn z_keyexpr_take(arg_this_: [*c]z_owned_keyexpr_t, arg_x: [*c]z_moved_keyexpr_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_keyexpr_null(&x.*._this);
}
pub fn z_liveliness_token_take(arg_this_: [*c]z_owned_liveliness_token_t, arg_x: [*c]z_moved_liveliness_token_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_liveliness_token_null(&x.*._this);
}
pub fn z_matching_listener_take(arg_this_: [*c]z_owned_matching_listener_t, arg_x: [*c]z_moved_matching_listener_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_matching_listener_null(&x.*._this);
}
pub fn z_memory_layout_take(arg_this_: [*c]z_owned_memory_layout_t, arg_x: [*c]z_moved_memory_layout_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_memory_layout_null(&x.*._this);
}
pub fn z_mutex_take(arg_this_: [*c]z_owned_mutex_t, arg_x: [*c]z_moved_mutex_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_mutex_null(&x.*._this);
}
pub fn z_publisher_take(arg_this_: [*c]z_owned_publisher_t, arg_x: [*c]z_moved_publisher_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_publisher_null(&x.*._this);
}
pub fn z_querier_take(arg_this_: [*c]z_owned_querier_t, arg_x: [*c]z_moved_querier_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_querier_null(&x.*._this);
}
pub fn z_query_take(arg_this_: [*c]z_owned_query_t, arg_x: [*c]z_moved_query_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_query_null(&x.*._this);
}
pub fn z_queryable_take(arg_this_: [*c]z_owned_queryable_t, arg_x: [*c]z_moved_queryable_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_queryable_null(&x.*._this);
}
pub fn z_reply_take(arg_this_: [*c]z_owned_reply_t, arg_x: [*c]z_moved_reply_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_reply_null(&x.*._this);
}
pub fn z_reply_err_take(arg_this_: [*c]z_owned_reply_err_t, arg_x: [*c]z_moved_reply_err_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_reply_err_null(&x.*._this);
}
pub fn z_ring_handler_query_take(arg_this_: [*c]z_owned_ring_handler_query_t, arg_x: [*c]z_moved_ring_handler_query_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_ring_handler_query_null(&x.*._this);
}
pub fn z_ring_handler_reply_take(arg_this_: [*c]z_owned_ring_handler_reply_t, arg_x: [*c]z_moved_ring_handler_reply_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_ring_handler_reply_null(&x.*._this);
}
pub fn z_ring_handler_sample_take(arg_this_: [*c]z_owned_ring_handler_sample_t, arg_x: [*c]z_moved_ring_handler_sample_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_ring_handler_sample_null(&x.*._this);
}
pub fn z_sample_take(arg_this_: [*c]z_owned_sample_t, arg_x: [*c]z_moved_sample_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_sample_null(&x.*._this);
}
pub fn z_session_take(arg_this_: [*c]z_owned_session_t, arg_x: [*c]z_moved_session_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_session_null(&x.*._this);
}
pub fn z_shm_client_take(arg_this_: [*c]z_owned_shm_client_t, arg_x: [*c]z_moved_shm_client_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_shm_client_null(&x.*._this);
}
pub fn z_shm_client_storage_take(arg_this_: [*c]z_owned_shm_client_storage_t, arg_x: [*c]z_moved_shm_client_storage_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_shm_client_storage_null(&x.*._this);
}
pub fn z_shm_take(arg_this_: [*c]z_owned_shm_t, arg_x: [*c]z_moved_shm_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_shm_null(&x.*._this);
}
pub fn z_shm_mut_take(arg_this_: [*c]z_owned_shm_mut_t, arg_x: [*c]z_moved_shm_mut_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_shm_mut_null(&x.*._this);
}
pub fn z_shm_provider_take(arg_this_: [*c]z_owned_shm_provider_t, arg_x: [*c]z_moved_shm_provider_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_shm_provider_null(&x.*._this);
}
pub fn z_slice_take(arg_this_: [*c]z_owned_slice_t, arg_x: [*c]z_moved_slice_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_slice_null(&x.*._this);
}
pub fn z_source_info_take(arg_this_: [*c]z_owned_source_info_t, arg_x: [*c]z_moved_source_info_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_source_info_null(&x.*._this);
}
pub fn z_string_array_take(arg_this_: [*c]z_owned_string_array_t, arg_x: [*c]z_moved_string_array_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_string_array_null(&x.*._this);
}
pub fn z_string_take(arg_this_: [*c]z_owned_string_t, arg_x: [*c]z_moved_string_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_string_null(&x.*._this);
}
pub fn z_subscriber_take(arg_this_: [*c]z_owned_subscriber_t, arg_x: [*c]z_moved_subscriber_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_subscriber_null(&x.*._this);
}
pub fn z_task_take(arg_this_: [*c]z_owned_task_t, arg_x: [*c]z_moved_task_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    z_internal_task_null(&x.*._this);
}
pub fn zc_closure_log_take(arg_closure_: [*c]zc_owned_closure_log_t, arg_x: [*c]zc_moved_closure_log_t) callconv(.c) void {
    var closure_ = arg_closure_;
    _ = &closure_;
    var x = arg_x;
    _ = &x;
    closure_.* = x.*._this;
    zc_internal_closure_log_null(&x.*._this);
}
pub fn zc_concurrent_close_handle_take(arg_this_: [*c]zc_owned_concurrent_close_handle_t, arg_x: [*c]zc_moved_concurrent_close_handle_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    zc_internal_concurrent_close_handle_null(&x.*._this);
}
pub fn zc_shm_client_list_take(arg_this_: [*c]zc_owned_shm_client_list_t, arg_x: [*c]zc_moved_shm_client_list_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    zc_internal_shm_client_list_null(&x.*._this);
}
pub fn ze_advanced_publisher_take(arg_this_: [*c]ze_owned_advanced_publisher_t, arg_x: [*c]ze_moved_advanced_publisher_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    ze_internal_advanced_publisher_null(&x.*._this);
}
pub fn ze_advanced_subscriber_take(arg_this_: [*c]ze_owned_advanced_subscriber_t, arg_x: [*c]ze_moved_advanced_subscriber_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    ze_internal_advanced_subscriber_null(&x.*._this);
}
pub fn ze_closure_miss_take(arg_closure_: [*c]ze_owned_closure_miss_t, arg_x: [*c]ze_moved_closure_miss_t) callconv(.c) void {
    var closure_ = arg_closure_;
    _ = &closure_;
    var x = arg_x;
    _ = &x;
    closure_.* = x.*._this;
    ze_internal_closure_miss_null(&x.*._this);
}
pub fn ze_publication_cache_take(arg_this_: [*c]ze_owned_publication_cache_t, arg_x: [*c]ze_moved_publication_cache_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    ze_internal_publication_cache_null(&x.*._this);
}
pub fn ze_querying_subscriber_take(arg_this_: [*c]ze_owned_querying_subscriber_t, arg_x: [*c]ze_moved_querying_subscriber_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    ze_internal_querying_subscriber_null(&x.*._this);
}
pub fn ze_sample_miss_listener_take(arg_this_: [*c]ze_owned_sample_miss_listener_t, arg_x: [*c]ze_moved_sample_miss_listener_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    ze_internal_sample_miss_listener_null(&x.*._this);
}
pub fn ze_serializer_take(arg_this_: [*c]ze_owned_serializer_t, arg_x: [*c]ze_moved_serializer_t) callconv(.c) void {
    var this_ = arg_this_;
    _ = &this_;
    var x = arg_x;
    _ = &x;
    this_.* = x.*._this;
    ze_internal_serializer_null(&x.*._this);
}

pub const struct_ze_moved_querying_subscriber_t = extern struct {
    _this: struct_ze_owned_querying_subscriber_t = @import("std").mem.zeroes(struct_ze_owned_querying_subscriber_t),
};

pub const ze_moved_querying_subscriber_t = struct_ze_moved_querying_subscriber_t;

pub const struct_ze_moved_sample_miss_listener_t = extern struct {
    _this: struct_ze_owned_sample_miss_listener_t = @import("std").mem.zeroes(struct_ze_owned_sample_miss_listener_t),
};

pub const ze_moved_sample_miss_listener_t = struct_ze_moved_sample_miss_listener_t;

pub const struct_ze_moved_serializer_t = extern struct {
    _this: struct_ze_owned_serializer_t = @import("std").mem.zeroes(struct_ze_owned_serializer_t),
};

pub const ze_moved_serializer_t = struct_ze_moved_serializer_t;

pub const struct_z_moved_alloc_layout_t = extern struct {
    _this: struct_z_owned_alloc_layout_t = @import("std").mem.zeroes(struct_z_owned_alloc_layout_t),
};

pub const z_moved_alloc_layout_t = struct_z_moved_alloc_layout_t;

pub const struct_z_moved_bytes_t = extern struct {
    _this: struct_z_owned_bytes_t = @import("std").mem.zeroes(struct_z_owned_bytes_t),
};

pub const z_moved_bytes_t = struct_z_moved_bytes_t;
pub const struct_z_moved_shm_t = extern struct {
    _this: struct_z_owned_shm_t = @import("std").mem.zeroes(struct_z_owned_shm_t),
};
pub const z_moved_shm_t = struct_z_moved_shm_t;
pub const struct_z_moved_shm_mut_t = extern struct {
    _this: struct_z_owned_shm_mut_t = @import("std").mem.zeroes(struct_z_owned_shm_mut_t),
};
pub const z_moved_shm_mut_t = struct_z_moved_shm_mut_t;
pub const struct_z_moved_slice_t = extern struct {
    _this: struct_z_owned_slice_t = @import("std").mem.zeroes(struct_z_owned_slice_t),
};
pub const z_moved_slice_t = struct_z_moved_slice_t;

pub const struct_z_moved_string_t = extern struct {
    _this: struct_z_owned_string_t = @import("std").mem.zeroes(struct_z_owned_string_t),
};
pub const z_moved_string_t = struct_z_moved_string_t;

pub const struct_z_moved_bytes_writer_t = extern struct {
    _this: struct_z_owned_bytes_writer_t = @import("std").mem.zeroes(struct_z_owned_bytes_writer_t),
};

pub const z_moved_bytes_writer_t = struct_z_moved_bytes_writer_t;

pub const struct_z_moved_chunk_alloc_result_t = extern struct {
    _this: struct_z_owned_chunk_alloc_result_t = @import("std").mem.zeroes(struct_z_owned_chunk_alloc_result_t),
};

pub const z_moved_chunk_alloc_result_t = struct_z_moved_chunk_alloc_result_t;

pub const struct_z_moved_closure_hello_t = extern struct {
    _this: struct_z_owned_closure_hello_t = @import("std").mem.zeroes(struct_z_owned_closure_hello_t),
};

pub const z_moved_closure_hello_t = struct_z_moved_closure_hello_t;

pub const struct_z_moved_closure_query_t = extern struct {
    _this: struct_z_owned_closure_query_t = @import("std").mem.zeroes(struct_z_owned_closure_query_t),
};

pub const z_moved_closure_query_t = struct_z_moved_closure_query_t;

pub const struct_z_moved_closure_reply_t = extern struct {
    _this: struct_z_owned_closure_reply_t = @import("std").mem.zeroes(struct_z_owned_closure_reply_t),
};

pub const z_moved_closure_reply_t = struct_z_moved_closure_reply_t;

pub const struct_z_moved_closure_sample_t = extern struct {
    _this: struct_z_owned_closure_sample_t = @import("std").mem.zeroes(struct_z_owned_closure_sample_t),
};

pub const z_moved_closure_sample_t = struct_z_moved_closure_sample_t;

pub const struct_z_moved_closure_zid_t = extern struct {
    _this: struct_z_owned_closure_zid_t = @import("std").mem.zeroes(struct_z_owned_closure_zid_t),
};
pub const z_moved_closure_zid_t = struct_z_moved_closure_zid_t;

pub const struct_z_moved_condvar_t = extern struct {
    _this: struct_z_owned_condvar_t = @import("std").mem.zeroes(struct_z_owned_condvar_t),
};
pub const z_moved_condvar_t = struct_z_moved_condvar_t;

pub const struct_z_moved_config_t = extern struct {
    _this: struct_z_owned_config_t = @import("std").mem.zeroes(struct_z_owned_config_t),
};

pub const z_moved_config_t = struct_z_moved_config_t;

pub const struct_z_moved_fifo_handler_query_t = extern struct {
    _this: struct_z_owned_fifo_handler_query_t = @import("std").mem.zeroes(struct_z_owned_fifo_handler_query_t),
};
pub const z_moved_fifo_handler_query_t = struct_z_moved_fifo_handler_query_t;
pub const struct_z_moved_fifo_handler_reply_t = extern struct {
    _this: struct_z_owned_fifo_handler_reply_t = @import("std").mem.zeroes(struct_z_owned_fifo_handler_reply_t),
};
pub const z_moved_fifo_handler_reply_t = struct_z_moved_fifo_handler_reply_t;
pub const struct_z_moved_fifo_handler_sample_t = extern struct {
    _this: struct_z_owned_fifo_handler_sample_t = @import("std").mem.zeroes(struct_z_owned_fifo_handler_sample_t),
};
pub const z_moved_fifo_handler_sample_t = struct_z_moved_fifo_handler_sample_t;
pub const struct_z_moved_source_info_t = extern struct {
    _this: struct_z_owned_source_info_t = @import("std").mem.zeroes(struct_z_owned_source_info_t),
};
pub const z_moved_source_info_t = struct_z_moved_source_info_t;

pub const struct_z_moved_encoding_t = extern struct {
    _this: struct_z_owned_encoding_t = @import("std").mem.zeroes(struct_z_owned_encoding_t),
};
pub const z_moved_encoding_t = struct_z_moved_encoding_t;

pub const struct_z_moved_hello_t = extern struct {
    _this: struct_z_owned_hello_t = @import("std").mem.zeroes(struct_z_owned_hello_t),
};
pub const z_moved_hello_t = struct_z_moved_hello_t;
pub const struct_z_moved_keyexpr_t = extern struct {
    _this: struct_z_owned_keyexpr_t = @import("std").mem.zeroes(struct_z_owned_keyexpr_t),
};
pub const z_moved_keyexpr_t = struct_z_moved_keyexpr_t;

pub const struct_z_moved_liveliness_token_t = extern struct {
    _this: struct_z_owned_liveliness_token_t = @import("std").mem.zeroes(struct_z_owned_liveliness_token_t),
};
pub const z_moved_liveliness_token_t = struct_z_moved_liveliness_token_t;
pub const struct_z_moved_matching_listener_t = extern struct {
    _this: struct_z_owned_matching_listener_t = @import("std").mem.zeroes(struct_z_owned_matching_listener_t),
};
pub const z_moved_matching_listener_t = struct_z_moved_matching_listener_t;
pub const struct_z_moved_memory_layout_t = extern struct {
    _this: struct_z_owned_memory_layout_t = @import("std").mem.zeroes(struct_z_owned_memory_layout_t),
};
pub const z_moved_memory_layout_t = struct_z_moved_memory_layout_t;
pub const struct_z_moved_mutex_t = extern struct {
    _this: struct_z_owned_mutex_t = @import("std").mem.zeroes(struct_z_owned_mutex_t),
};
pub const z_moved_mutex_t = struct_z_moved_mutex_t;

pub const struct_z_moved_query_t = extern struct {
    _this: struct_z_owned_query_t = @import("std").mem.zeroes(struct_z_owned_query_t),
};
pub const z_moved_query_t = struct_z_moved_query_t;

pub const struct_z_moved_session_t = extern struct {
    _this: struct_z_owned_session_t = @import("std").mem.zeroes(struct_z_owned_session_t),
};
pub const z_moved_session_t = struct_z_moved_session_t;
pub const struct_z_moved_shm_client_t = extern struct {
    _this: struct_z_owned_shm_client_t = @import("std").mem.zeroes(struct_z_owned_shm_client_t),
};
pub const z_moved_shm_client_t = struct_z_moved_shm_client_t;
pub const struct_z_moved_shm_client_storage_t = extern struct {
    _this: struct_z_owned_shm_client_storage_t = @import("std").mem.zeroes(struct_z_owned_shm_client_storage_t),
};
pub const z_moved_shm_client_storage_t = struct_z_moved_shm_client_storage_t;
pub const struct_z_moved_shm_provider_t = extern struct {
    _this: struct_z_owned_shm_provider_t = @import("std").mem.zeroes(struct_z_owned_shm_provider_t),
};

pub const z_moved_shm_provider_t = struct_z_moved_shm_provider_t;

pub const struct_z_moved_string_array_t = extern struct {
    _this: struct_z_owned_string_array_t = @import("std").mem.zeroes(struct_z_owned_string_array_t),
};
pub const z_moved_string_array_t = struct_z_moved_string_array_t;
pub const struct_z_moved_subscriber_t = extern struct {
    _this: struct_z_owned_subscriber_t = @import("std").mem.zeroes(struct_z_owned_subscriber_t),
};
pub const z_moved_subscriber_t = struct_z_moved_subscriber_t;

pub const struct_z_moved_queryable_t = extern struct {
    _this: struct_z_owned_queryable_t = @import("std").mem.zeroes(struct_z_owned_queryable_t),
};
pub const z_moved_queryable_t = struct_z_moved_queryable_t;
pub const struct_z_moved_reply_t = extern struct {
    _this: struct_z_owned_reply_t = @import("std").mem.zeroes(struct_z_owned_reply_t),
};
pub const z_moved_reply_t = struct_z_moved_reply_t;
pub const struct_z_moved_reply_err_t = extern struct {
    _this: struct_z_owned_reply_err_t = @import("std").mem.zeroes(struct_z_owned_reply_err_t),
};
pub const z_moved_reply_err_t = struct_z_moved_reply_err_t;
pub const struct_z_moved_ring_handler_query_t = extern struct {
    _this: struct_z_owned_ring_handler_query_t = @import("std").mem.zeroes(struct_z_owned_ring_handler_query_t),
};
pub const z_moved_ring_handler_query_t = struct_z_moved_ring_handler_query_t;
pub const struct_z_moved_ring_handler_reply_t = extern struct {
    _this: struct_z_owned_ring_handler_reply_t = @import("std").mem.zeroes(struct_z_owned_ring_handler_reply_t),
};
pub const z_moved_ring_handler_reply_t = struct_z_moved_ring_handler_reply_t;
pub const struct_z_moved_ring_handler_sample_t = extern struct {
    _this: struct_z_owned_ring_handler_sample_t = @import("std").mem.zeroes(struct_z_owned_ring_handler_sample_t),
};
pub const z_moved_ring_handler_sample_t = struct_z_moved_ring_handler_sample_t;
pub const struct_z_moved_sample_t = extern struct {
    _this: struct_z_owned_sample_t = @import("std").mem.zeroes(struct_z_owned_sample_t),
};
pub const z_moved_sample_t = struct_z_moved_sample_t;

pub const struct_zc_moved_closure_log_t = extern struct {
    _this: struct_zc_owned_closure_log_t = @import("std").mem.zeroes(struct_zc_owned_closure_log_t),
};
pub const zc_moved_closure_log_t = struct_zc_moved_closure_log_t;
pub const struct_zc_moved_concurrent_close_handle_t = extern struct {
    _this: struct_zc_owned_concurrent_close_handle_t = @import("std").mem.zeroes(struct_zc_owned_concurrent_close_handle_t),
};
pub const zc_moved_concurrent_close_handle_t = struct_zc_moved_concurrent_close_handle_t;

pub const struct_z_moved_task_t = extern struct {
    _this: struct_z_owned_task_t = @import("std").mem.zeroes(struct_z_owned_task_t),
};
pub const z_moved_task_t = struct_z_moved_task_t;

pub const struct_z_moved_querier_t = extern struct {
    _this: struct_z_owned_querier_t = @import("std").mem.zeroes(struct_z_owned_querier_t),
};
pub const z_moved_querier_t = struct_z_moved_querier_t;

pub const struct_z_moved_publisher_t = extern struct {
    _this: struct_z_owned_publisher_t = @import("std").mem.zeroes(struct_z_owned_publisher_t),
};
pub const z_moved_publisher_t = struct_z_moved_publisher_t;

pub const struct_z_moved_closure_matching_status_t = extern struct {
    _this: struct_z_owned_closure_matching_status_t = @import("std").mem.zeroes(struct_z_owned_closure_matching_status_t),
};
pub const z_moved_closure_matching_status_t = struct_z_moved_closure_matching_status_t;

pub const struct_zc_moved_shm_client_list_t = extern struct {
    _this: struct_zc_owned_shm_client_list_t = @import("std").mem.zeroes(struct_zc_owned_shm_client_list_t),
};
pub const zc_moved_shm_client_list_t = struct_zc_moved_shm_client_list_t;

pub const struct_ze_moved_advanced_publisher_t = extern struct {
    _this: struct_ze_owned_advanced_publisher_t = @import("std").mem.zeroes(struct_ze_owned_advanced_publisher_t),
};
pub const ze_moved_advanced_publisher_t = struct_ze_moved_advanced_publisher_t;

pub const struct_ze_moved_closure_miss_t = extern struct {
    _this: struct_ze_owned_closure_miss_t = @import("std").mem.zeroes(struct_ze_owned_closure_miss_t),
};
pub const ze_moved_closure_miss_t = struct_ze_moved_closure_miss_t;

pub const struct_ze_moved_advanced_subscriber_t = extern struct {
    _this: struct_ze_owned_advanced_subscriber_t = @import("std").mem.zeroes(struct_ze_owned_advanced_subscriber_t),
};
pub const ze_moved_advanced_subscriber_t = struct_ze_moved_advanced_subscriber_t;

pub const struct_ze_moved_publication_cache_t = extern struct {
    _this: struct_ze_owned_publication_cache_t = @import("std").mem.zeroes(struct_ze_owned_publication_cache_t),
};
pub const ze_moved_publication_cache_t = struct_ze_moved_publication_cache_t;